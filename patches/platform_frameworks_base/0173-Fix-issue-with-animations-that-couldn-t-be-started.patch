From caca26d9e07ba4f699d7c8ab578f9642059c58cf Mon Sep 17 00:00:00 2001
From: Jorim Jaggi <jjaggi@google.com>
Date: Tue, 27 Mar 2018 18:02:18 +0200
Subject: [PATCH 173/306] Fix issue with animations that couldn't be started

If we can't create a remote animation target for some reason
(removed from task, no main window, etc), SurfaceAnimator
called startAnimation but we never invoke the finish callback.

Thus, we need to make sure to also invoke the finish callback
when not using the AppWindowToken as part of the remote animation.

This actually happens if the main intent clears the task, like
Settings. In that case, it removes all sub activities, which then
get added to mClosingApps, which then are part of a transition.

It's questionable why this would need to happen, but we don't have
the risk budget to go down that rabbit hole.

Test: RemoteAnimationControllerTest
Test: Open Settings -> Network -> Wifi, press home, reopen
Settings, repeat 10x
Test: adb shell dumpsys window -a
Fixes: 76438155
Change-Id: Ib528d5c0d3559eb20522799af68ebbfb17b9801b
(cherry picked from commit b8a9cbe4d8f7d2af99e487fe89ca2c42578c6f88)
---
 .../server/wm/AnimatingAppWindowTokenRegistry.java   | 10 ++++++++++
 .../android/server/wm/RemoteAnimationController.java |  7 +++++++
 .../core/java/com/android/server/wm/TaskStack.java   |  1 +
 .../server/wm/RemoteAnimationControllerTest.java     | 12 ++++++++++++
 4 files changed, 30 insertions(+)

diff --git a/services/core/java/com/android/server/wm/AnimatingAppWindowTokenRegistry.java b/services/core/java/com/android/server/wm/AnimatingAppWindowTokenRegistry.java
index ae343da30c7..416469bd3be 100644
--- a/services/core/java/com/android/server/wm/AnimatingAppWindowTokenRegistry.java
+++ b/services/core/java/com/android/server/wm/AnimatingAppWindowTokenRegistry.java
@@ -19,6 +19,7 @@ package com.android.server.wm;
 import android.util.ArrayMap;
 import android.util.ArraySet;
 
+import java.io.PrintWriter;
 import java.util.ArrayList;
 
 /**
@@ -88,4 +89,13 @@ class AnimatingAppWindowTokenRegistry {
         }
         mTmpRunnableList.clear();
     }
+
+    void dump(PrintWriter pw, String header, String prefix) {
+        if (!mAnimatingTokens.isEmpty() || !mFinishedTokens.isEmpty()) {
+            pw.print(prefix); pw.println(header);
+            prefix = prefix + "  ";
+            pw.print(prefix); pw.print("mAnimatingTokens="); pw.println(mAnimatingTokens);
+            pw.print(prefix); pw.print("mFinishedTokens="); pw.println(mFinishedTokens);
+        }
+    }
 }
diff --git a/services/core/java/com/android/server/wm/RemoteAnimationController.java b/services/core/java/com/android/server/wm/RemoteAnimationController.java
index 3e7fedac2db..379a1a1528b 100644
--- a/services/core/java/com/android/server/wm/RemoteAnimationController.java
+++ b/services/core/java/com/android/server/wm/RemoteAnimationController.java
@@ -134,11 +134,18 @@ class RemoteAnimationController {
     private RemoteAnimationTarget[] createAnimations() {
         final ArrayList<RemoteAnimationTarget> targets = new ArrayList<>();
         for (int i = mPendingAnimations.size() - 1; i >= 0; i--) {
+            final RemoteAnimationAdapterWrapper wrapper = mPendingAnimations.get(i);
             final RemoteAnimationTarget target =
                     mPendingAnimations.get(i).createRemoteAppAnimation();
             if (target != null) {
                 targets.add(target);
             } else {
+
+                // We can't really start an animation but we still need to make sure to finish the
+                // pending animation that was started by SurfaceAnimator
+                if (wrapper.mCapturedFinishCallback != null) {
+                    wrapper.mCapturedFinishCallback.onAnimationFinished(wrapper);
+                }
                 mPendingAnimations.remove(i);
             }
         }
diff --git a/services/core/java/com/android/server/wm/TaskStack.java b/services/core/java/com/android/server/wm/TaskStack.java
index 900e2df1258..62754ada790 100644
--- a/services/core/java/com/android/server/wm/TaskStack.java
+++ b/services/core/java/com/android/server/wm/TaskStack.java
@@ -1387,6 +1387,7 @@ public class TaskStack extends WindowContainer<Task> implements
                 token.dump(pw, "    ", dumpAll);
             }
         }
+        mAnimatingAppWindowTokenRegistry.dump(pw, "AnimatingApps:", prefix);
     }
 
     @Override
diff --git a/services/tests/servicestests/src/com/android/server/wm/RemoteAnimationControllerTest.java b/services/tests/servicestests/src/com/android/server/wm/RemoteAnimationControllerTest.java
index 64501e49a9a..553d65824c5 100644
--- a/services/tests/servicestests/src/com/android/server/wm/RemoteAnimationControllerTest.java
+++ b/services/tests/servicestests/src/com/android/server/wm/RemoteAnimationControllerTest.java
@@ -197,4 +197,16 @@ public class RemoteAnimationControllerTest extends WindowTestsBase {
         assertEquals(1, appsCaptor.getValue().length);
         assertEquals(mMockLeash, appsCaptor.getValue()[0].leash);
     }
+
+    @Test
+    public void testRemovedBeforeStarted() throws Exception {
+        final WindowState win = createWindow(null /* parent */, TYPE_BASE_APPLICATION, "testWin");
+        final AnimationAdapter adapter = mController.createAnimationAdapter(win.mAppToken,
+                new Point(50, 100), new Rect(50, 100, 150, 150));
+        adapter.startAnimation(mMockLeash, mMockTransaction, mFinishedCallback);
+        win.mAppToken.removeImmediately();
+        mController.goodToGo();
+        verifyZeroInteractions(mMockRunner);
+        verify(mFinishedCallback).onAnimationFinished(eq(adapter));
+    }
 }
-- 
2.17.1

